// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: workerz.sql

package dbq

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const deleteAllWorkerz = `-- name: DeleteAllWorkerz :exec
DELETE FROM workerz
`

func (q *Queries) DeleteAllWorkerz(ctx context.Context) error {
	_, err := q.db.Exec(ctx, deleteAllWorkerz)
	return err
}

const deleteWorkerz = `-- name: DeleteWorkerz :exec
DELETE FROM workerz WHERE id = $1
`

func (q *Queries) DeleteWorkerz(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteWorkerz, id)
	return err
}

const getAllWorkerz = `-- name: GetAllWorkerz :many
SELECT id, user_id, full_name, email, role, country, salary, created_at, updated_at FROM workerz
`

func (q *Queries) GetAllWorkerz(ctx context.Context) ([]Workerz, error) {
	rows, err := q.db.Query(ctx, getAllWorkerz)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Workerz{}
	for rows.Next() {
		var i Workerz
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.FullName,
			&i.Email,
			&i.Role,
			&i.Country,
			&i.Salary,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getWorkerzByEmail = `-- name: GetWorkerzByEmail :one
SELECT id, user_id, full_name, email, role, country, salary, created_at, updated_at FROM workerz WHERE email = $1
`

func (q *Queries) GetWorkerzByEmail(ctx context.Context, email string) (Workerz, error) {
	row := q.db.QueryRow(ctx, getWorkerzByEmail, email)
	var i Workerz
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.FullName,
		&i.Email,
		&i.Role,
		&i.Country,
		&i.Salary,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getWorkerzByUserID = `-- name: GetWorkerzByUserID :one
SELECT id, user_id, full_name, email, role, country, salary, created_at, updated_at FROM workerz WHERE user_id = $1
`

func (q *Queries) GetWorkerzByUserID(ctx context.Context, userID string) (Workerz, error) {
	row := q.db.QueryRow(ctx, getWorkerzByUserID, userID)
	var i Workerz
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.FullName,
		&i.Email,
		&i.Role,
		&i.Country,
		&i.Salary,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const insertWorkerz = `-- name: InsertWorkerz :one
INSERT INTO workerz (
    full_name,
    email,
    user_id,
    role,
    country,
    salary,
    created_at,
    updated_at
) VALUES ($1, $2, $3, $4, $5, $6, $7, $8) RETURNING id, user_id, full_name, email, role, country, salary, created_at, updated_at
`

type InsertWorkerzParams struct {
	FullName  string           `json:"full_name"`
	Email     string           `json:"email"`
	UserID    string           `json:"user_id"`
	Role      string           `json:"role"`
	Country   string           `json:"country"`
	Salary    float64          `json:"salary"`
	CreatedAt pgtype.Timestamp `json:"created_at"`
	UpdatedAt pgtype.Timestamp `json:"updated_at"`
}

func (q *Queries) InsertWorkerz(ctx context.Context, arg InsertWorkerzParams) (Workerz, error) {
	row := q.db.QueryRow(ctx, insertWorkerz,
		arg.FullName,
		arg.Email,
		arg.UserID,
		arg.Role,
		arg.Country,
		arg.Salary,
		arg.CreatedAt,
		arg.UpdatedAt,
	)
	var i Workerz
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.FullName,
		&i.Email,
		&i.Role,
		&i.Country,
		&i.Salary,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listWorkerzByCountry = `-- name: ListWorkerzByCountry :many
SELECT id, user_id, full_name, email, role, country, salary, created_at, updated_at FROM workerz
WHERE country = $1
ORDER BY id
LIMIT $2
OFFSET $3
`

type ListWorkerzByCountryParams struct {
	Country string `json:"country"`
	Limit   int32  `json:"limit"`
	Offset  int32  `json:"offset"`
}

func (q *Queries) ListWorkerzByCountry(ctx context.Context, arg ListWorkerzByCountryParams) ([]Workerz, error) {
	rows, err := q.db.Query(ctx, listWorkerzByCountry, arg.Country, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Workerz{}
	for rows.Next() {
		var i Workerz
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.FullName,
			&i.Email,
			&i.Role,
			&i.Country,
			&i.Salary,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateWorkerzEmail = `-- name: UpdateWorkerzEmail :one
UPDATE workerz SET email = $1 WHERE id = $2 RETURNING id, user_id, full_name, email, role, country, salary, created_at, updated_at
`

type UpdateWorkerzEmailParams struct {
	Email string `json:"email"`
	ID    int64  `json:"id"`
}

func (q *Queries) UpdateWorkerzEmail(ctx context.Context, arg UpdateWorkerzEmailParams) (Workerz, error) {
	row := q.db.QueryRow(ctx, updateWorkerzEmail, arg.Email, arg.ID)
	var i Workerz
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.FullName,
		&i.Email,
		&i.Role,
		&i.Country,
		&i.Salary,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
